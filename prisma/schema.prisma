// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  nickname  String @unique
  password String
  createdAt DateTime
  updatedAt DateTime?
  profile Profile?
  post Post[] @relation("post")
  comment Comment[] @relation("comment")
  like Like[]
  scrap Scrap[]
  @@map(name: "users")
}

model Profile {
  id Int  @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int
  introduce String?
  blogUrl String?
  githubUrl String?
  image Bytes? @db.Blob
  
  @@map(name: "profiles")
}

model Post {
  id        Int         @id @default(autoincrement())
  title     String
  category  Category
  tag       String?
  content   String      @db.Text
  comment   Comment[]
  author    User        @relation("post", fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  like      Like[]
  scrap     Scrap[]
  createdAt  DateTime
  updatedAt  DateTime?
  @@map("posts")
}

enum Category {
  Notice
  Question
  Free
  Study
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String    @db.VarChar(500)
  author    User      @relation("comment", fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  createdAt DateTime
  updatedAt DateTime?
  @@map("comments")
}

model Like {
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  @@unique([userId, postId], name: "LikeKey")
  @@map("likes")
}

model Scrap {
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  @@unique([userId, postId], name: "ScrapKey")
  @@map("scraps")
}